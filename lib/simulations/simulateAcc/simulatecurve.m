function points=simulatecurve(inputThreshold)
% pulled directly from psychcurve demo function in psignifit package

data =    [...
    0.10,   45.0000,   90.0000;...
    0.15,   50.0000,   90.0000;...
    0.20,   44.0000,   90.0000;...
    0.25,   44.0000,   90.0000;...
    0.30,   52.0000,   90.0000;...
    0.35,   53.0000,   90.0000;...
    0.40,   62.0000,   90.0000;...
    0.45,   64.0000,   90.0000;...
    0.50,   76.0000,   90.0000;...
    0.60,   79.0000,   90.0000;...
    0.70,   88.0000,   90.0000;...
    0.80,   90.0000,   90.0000;...
    1.00,   90.0000,   90.0000];

options             = struct;   % initialize as an empty struct

options.sigmoidName = 'norm';   % choose a cumulative Gaussian as the sigmoid
options.expType     = '2AFC';   % choose 2-AFC as the paradigm of the experiment
if exist('inputThreshold','var')
    options.threshPC = inputThreshold;
end

result = psignifit(data,options);

result.Fit
result.conf_Intervals

% so we could simulate a curve this way, but I think the plotted line is
% not scaled by guessing and lapse rate, and given troubles so far, might not be great?
[hline,hdata]=plotPsych(result);
[~,hline] = psychcurve;
points = [hline.XData' hline.YData'];
close(gcf);

% might be able to use getSlope instead?
